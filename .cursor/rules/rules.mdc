---
description: 
globs: 
alwaysApply: false
---
Проект "Phantom Edge" Loader: Дизайн и Принципы

Манифест: Надоели паблик лоадеры, которые дохнут от первого чиха Defender'а? Этот проект – ответ. Создаем модульный, суровый лоадер для Windows 10/11 (23H2+), заточенный под обход современных EDR (Defender ATP, CrowdStrike, Cortex и им подобных). Цель – доставить и выполнить пейлоад тихо, без следов на диске, прямо под носом у защиты. Инструмент для профессионалов и исследователей. Использование для скама, ранци/стилеров и прочей грязи = автобан и презрение.

Ключевые Фичи и Техники:

    Исполнение Payload'а:

        Diskless Execution: Ни байта на диск. Работаем только в памяти.

        Гибкие Бэкенды:

            TXF Hollowing: Загрузка через транзакционный NTFS (скрытно, но требует прав).

            MapViewOfSection: Классика с NtMapViewOfSection для прямого маппинга PE.

            RDI (Reflective DLL Injection): Поддержка рефлективных DLL для самозагрузки.

            Модульная архитектура позволяет легко добавлять новые техники.

    Техники Обхода (Evasion):

        Unhooking ("Очистка"): Восстановление оригинальных байт системных DLL (например, ntdll.dll) в памяти процесса перед основной работой для сброса EDR-хуков.

        AMSI/ETW Bypass: Динамический патчинг функций AMSI (AmsiScanBuffer и т.д.) и трассировки ETW в памяти для ослепления защитных механизмов.

        Indirect Syscalls ("Syscall Gate"): Никаких прямых вызовов Nt* API из ntdll. Используем динамическое разрешение syscall ID и кастомные ассемблерные стабы (mov r10, rcx; mov eax, <id>; syscall; ret) для прямого обращения к ядру, минуя user-mode хуки.

        Обход IOC: Минимизация характерных индикаторов компрометации (подозрительные строки, импорты, паттерны памяти).

    Форматы Payload'ов:

        BOF (Beacon Object Files): Совместимость с BOF-интерфейсом популярных C2 (Havoc, Cobalt Strike).

        Reflective DLL: Загрузка и исполнение DLL, способных мапить себя в память.

        Shellcode: Прямое выполнение позиционно-независимого кода.

    Архитектура и Стек:

        C (Core/Stub): Микроскопический стаб без CRT (/NODEFAULTLIB), основная логика маппинга, анхукинга, патчинга. Максимальная производительность и контроль.

        Rust (Modules): Высокоуровневая логика, бэкенды загрузки, возможно, парсеры. no_std для минимизации footprint'а и зависимостей. Безопасность памяти там, где это уместно.

        ASM (Optional): Прецизионные ассемблерные вставки для syscall стабов, трамплинов, специфических оптимизаций.

        Структура: stub (no-CRT C) -> core (C, low-level) -> modules (Rust/C, backends).

        Интерфейс (rtldr_ctx): Минимальный контекст передается модулям, включая указатели на кастомные alloc/syscall_wrapper для полного отрыва от IAT/стандартных API.

OPSEC и Сборка:

    Build Polymorphism: Система сборки (CMake) настроена на генерацию уникальных билдов для каждой "операции" или клиента. Вариативность символов, хешей, возможно, структур данных через скрипты/препроцессинг.

    No CRT Stub: Максимально маленький и нетипичный entry point.

    Symbol Stripping: Никаких отладочных символов или лишней информации в релизных бинарниках.

    Artifact Handling: Каждый билд получает уникальный UUID, хранится изолированно, автоматически удаляется через короткое время (48ч). Никаких артефактов в публичных репо или CI логах.

Тестирование:

    Жесткое тестирование каждой фичи против актуальных EDR в изолированной лабе (WDAG, кастомные VM).

    Smoke-тесты в CI (на self-hosted runner'ах).

    Регулярный фаззинг (WinAFL/Syzkaller-like) критических компонентов (маппинг, парсинг).

"Правила Клуба" / Принципы:

    Чистота Намерений: Этот инструмент – для симуляции реальных угроз в рамках законных и согласованных Red Team операций или для глубоких исследований механизмов защиты. Никакой грязи.

    Гигиена: Бинарники – расходный материал. Создал -> Протестировал/Использовал (в рамках контракта) -> Уничтожил. Не свети артефактами.

    Качество Кода: Даже для "боевого" софта – пиши чисто. Код должен быть читаемым и поддерживаемым (насколько это возможно без ущерба для OPSEC). SOLID – не ругательство.

    Не Болтай Лишнего: Не сливай уникальные трюки и техники без веской причины. Цени свою работу и работу коллег.

Roadmap (Возможное развитие):

    Углубленная поддержка Windows 11 on ARM (PAC/ARM64EC).

    Новые техники маскировки памяти (шифрование "спящего" кода).

    Исследование обхода kernel-level сенсоров EDR (очень сложно, но интересно).

    Более продвинутые техники полиморфизма/метаморфизма.


Итог: "Phantom Edge" – это не еще один паблик лоадер. Это фреймворк для создания кастомных, глубоко эшелонированных средств доставки для серьезных задач. Если ты не Red Teamer или исследователь, которому нужен именно такой уровень, – этот инструмент не для тебя.